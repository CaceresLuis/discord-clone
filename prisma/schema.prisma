// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String
  email    String @unique

  servers Server[]
  members Member[]
  channels Chanel[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Server {
  id         Int     @id @default(autoincrement())
  name       String
  imageUrl   String
  inviteCode String  @unique
  profileId  Int
  profile    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Chanel[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        Int        @id @default(autoincrement())
  role      MemberRole @default(GUEST)
  profileId Int
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversation           Conversation[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId, serverId])
}

model Chanel {
  id   Int        @id @default(autoincrement())
  name String
  type ChanelType @default(TEXT)

  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
}

enum ChanelType {
  TEXT
  AUDIO
  VIDEO
}

model Message {
  id      Int     @id @default(autoincrement())
  content String
  fileUrl String?

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  chanelId Int
  chanel   Chanel @relation(fields: [chanelId], references: [id], onDelete: Cascade)

  deleted  Boolean  @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([memberId, chanelId])
}

model DirectMessage {
  id      Int     @id @default(autoincrement())
  content String
  fileUrl String?

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId Int
  chanel         Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted  Boolean  @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([memberId, conversationId])
}

model Conversation {
  id          Int    @id @default(autoincrement())
  memberOneId Int
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId Int
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  memberId Int?
  member   Member? @relation(fields: [memberId], references: [id])

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId, memberTwoId])
}
